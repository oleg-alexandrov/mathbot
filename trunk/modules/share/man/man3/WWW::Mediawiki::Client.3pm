.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WWW::Mediawiki::Client 3"
.TH WWW::Mediawiki::Client 3 "2005-03-04" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
WWW::Mediawiki::Client
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use WWW::Mediawiki::Client;
.Ve
.PP
.Vb 4
\&  my $filename = 'Subject.wiki';
\&  my $wmc = WWW::Mediawiki::Client->new(
\&      site_url => 'http://www.wikitravel.org/en'
\&  );
.Ve
.PP
.Vb 2
\&  # output info messages, but not debug
\&  $wmc->set_output_level(WWW::Mediawiki::Client::INFO);
.Ve
.PP
.Vb 2
\&  # like cvs update
\&  $wmc->do_update($filename);
.Ve
.PP
.Vb 2
\&  # like cvs commit
\&  $wmc->do_commit($filename, $message);
.Ve
.PP
.Vb 3
\&  #aliases
\&  $wmc->do_up($filename);
\&  $wmc->do_com($filename, $message);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
WWW::Mediawiki::Client provides a very simple cvs-like interface for
Mediawiki driven WikiWiki websites, such as
<http://www.wikitravel.org|Wikitravel> or
<http://www.wikipedia.org|Wikipedia.>  The interface mimics the two most
basic cvs commands: update and commit with similarly named methods.  Each
of these has a shorter alias, as in cvs.  Verbosity is controled through an
output_level accessor method.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.Sh "new"
.IX Subsection "new"
.Vb 1
\&  my $wmc = WWW::Mediawiki::Client->new(site_url = 'http://www.wikitravel.org');
.Ve
.PP
Accepts name-value pairs which will be used as initial values for any of
the fields which have accessors below.  Throws the same execptions as the
accessor for any field named.
.SH "ACCESSORS"
.IX Header "ACCESSORS"
.Sh "site_url"
.IX Subsection "site_url"
.Vb 1
\&  my $url = $wmc->site_url($url);
.Ve
.PP
The site \s-1URL\s0 is the base url for reaching the Mediawiki server who's
content you wish to edit.  There is no default.  This has to be set before
attempting to use any of the methods which attempt to access the server.
.Sh "site_url"
.IX Subsection "site_url"
.Vb 1
\&  my $char = $wmc->space_substitute($char);
.Ve
.PP
Mediawiki allows article names to have spaces, for instance the default
Meidawiki main page is called \*(L"Main Page\*(R".  The spaces need to be converted
for the \s-1URL\s0, and to avoid the normal but somewhat difficult to read \s-1URL\s0
escape the Mediawiki software substitutes some other character.  Wikipedia
uses a '+', as in \*(L"Main+Page\*(R" and Wikitravel uses a '_' as in \*(L"Main_page\*(R".
WWW::Mediawiki::Client always writes wiki files using the '_', but converts
them to whatever the \f(CW\*(C`space_substitute\*(C'\fR is set to for the \s-1URL\s0.
.Sh "username"
.IX Subsection "username"
.Vb 1
\&  my $url = $wmc->username($url);
.Ve
.PP
The username to use if WWW::Mediawiki::Client is to log in to the Mediawiki server as a given
user.
.Sh "password"
.IX Subsection "password"
.Vb 1
\&  my $url = $wmc->password($url);
.Ve
.PP
The password to use if WWW::Mediawiki::Client is to log in to the Mediawiki server as a given
user.  Note that this password is sent \fIen clair\fR, so it's probably not a
good idea to use an important one.
.Sh "edit_path"
.IX Subsection "edit_path"
.Vb 1
\&  my $path = $wmc->edit_path($path);
.Ve
.PP
The edit path is a string which given the site \s-1URL\s0 and a page name can be
used to construct the balance of the \s-1URL\s0 to the edit page for that page on
the wikimedia server.  You shouldn't have to worry about this unless the
Mediawiki software on your server has been altered or is very out\-of\-date.
.Sh "action_path"
.IX Subsection "action_path"
.Vb 1
\&  my $path = $wmc->action_path($path);
.Ve
.PP
The action path is a string which given the site \s-1URL\s0 and a page name can be
used to construct the balance of the \s-1URL\s0 to the action page for that page on
the wikimedia server.  You shouldn't have to worry about this unless the
Mediawiki software on your server has been altered or is very out\-of\-date.
.Sh "login_path"
.IX Subsection "login_path"
.Vb 1
\&  my $path = $wmc->login_path($path);
.Ve
.PP
The login path is a string which given the site \s-1URL\s0 and a page name can be
used to construct the balance of the \s-1URL\s0 to the login page for that page on
the wikimedia server.  You shouldn't have to worry about this unless the
Mediawiki software on your server has been altered or is very out\-of\-date.
.Sh "output_level"
.IX Subsection "output_level"
.Vb 1
\&  my $ol = $wmc->output_level(WWW::Mediawiki::Client::INFO);
.Ve
.PP
This output level accessor provides for verbosity control.  There are a
number of different output levels:
.IP "WWW::Mediawiki::Client::QUIET" 4
.IX Item "WWW::Mediawiki::Client::QUIET"
.PD 0
.IP "WWW::Mediawiki::Client::ERROR" 4
.IX Item "WWW::Mediawiki::Client::ERROR"
.IP "WWW::Mediawiki::Client::INFO" 4
.IX Item "WWW::Mediawiki::Client::INFO"
.IP "WWW::Mediawiki::Client::DEBUG" 4
.IX Item "WWW::Mediawiki::Client::DEBUG"
.PD
.Sh "commit_message"
.IX Subsection "commit_message"
.Vb 1
\&  my $msg = $wmc->commit_message($msg);
.Ve
.PP
A \f(CW\*(C`commit_message\*(C'\fR must be specified before \f(CW\*(C`do_commit\*(C'\fR can be run.  This
will be used as the comment when submitting pages to the Mediawiki server.
.SH "Instance Methods"
.IX Header "Instance Methods"
.Sh "do_login"
.IX Subsection "do_login"
.Vb 1
\&  $wmc->do_login;
.Ve
.PP
The \f(CW\*(C`do_login\*(C'\fR method operates like the cvs login command.  The
\&\f(CW\*(C`site_url\*(C'\fR, \f(CW\*(C`username\*(C'\fR, and \f(CW\*(C`password\*(C'\fR attributes must be set before
attempting to login.  Once \f(CW\*(C`do_login\*(C'\fR has been called successfully any
successful commit from the same directory will be logged in the Mediawiki
server as having been done by \f(CW\*(C`username\*(C'\fR.
.Sh "do_li"
.IX Subsection "do_li"
.Vb 1
\&  $wmc->do_li;
.Ve
.PP
An alias for \f(CW\*(C`do_login\*(C'\fR.
.Sh "do_update"
.IX Subsection "do_update"
.Vb 1
\&  $self->do_update($filename, ...);
.Ve
.PP
The \f(CW\*(C`do_update\*(C'\fR method operates like a much-simplified version of the cvs
update command.  The argument is a list of filenames, whose contents will
be compared to the version on the WikiMedia server and to a locally stored
reference copy.  Lines which have changed only in the server version will
be merged into the local version, while lines which have changed in both
the server and local version will be flagged as possible conflicts, and
marked as such, somewhate in the manner of cvs (actually this syntax comes
from the default conflict behavior of Algorithm::Diff::Apply):
.PP
.Vb 5
\&  >>>>>> http://server.somewiki.org/en
\&  The line as it appears on the server
\&  >>>>>> Filename.wiki
\&  The line as it appears locally
\&  <<<<<<
.Ve
.PP
After the merging, and conflict marking is complete the server version will
be copied into the reference version.
.PP
If either the reference version or the local version are empty, or if
either file does not exist they will both be created as a copy of the
current server version.
.PP
\&\fBThrows:\fR
.IP "CouldNotGetServerVersion" 4
.IX Item "CouldNotGetServerVersion"
.Sh "do_up"
.IX Subsection "do_up"
An alias for \f(CW\*(C`do_update\*(C'\fR.
.Sh "do_commit"
.IX Subsection "do_commit"
.Vb 1
\&  $self->do_commit($filename);
.Ve
.PP
As with \f(CW\*(C`do_update\*(C'\fR the \f(CW\*(C`do_commit\*(C'\fR method operates like a much
simplified version of the cvs commit command.  Again, the argument is a
filename.  In keeping with the operation of cvs, \f(CW\*(C`do_commit\*(C'\fR does not
automatically do an update, but does check the server version against the
local reference copy, throwing an error if the server version has changed,
thus forcing the user to do an update.  A different error is thrown if the
conflict pattern sometimes created by \f(CW\*(C`do_update\*(C'\fR is found.
.PP
After the error checking is done the local copy is submitted to the server,
and, if all goes well, copied to the local reference version.
.PP
\&\fBThrows:\fR
.IP "UpdateNeeded" 4
.IX Item "UpdateNeeded"
.PD 0
.IP "ConflictsPresent" 4
.IX Item "ConflictsPresent"
.IP "CouldNotGetServerVersion" 4
.IX Item "CouldNotGetServerVersion"
.IP "UploadFailed" 4
.IX Item "UploadFailed"
.PD
.Sh "do_com"
.IX Subsection "do_com"
This is an alias for \f(CW\*(C`do_commit\*(C'\fR.
.Sh "save_state"
.IX Subsection "save_state"
.Vb 1
\&  $wmc->save_state;
.Ve
.PP
Saves the current state of the wmc object in the current working directory.
.Sh "load_state"
.IX Subsection "load_state"
.Vb 1
\&  $wmc = $wmc->load_state;
.Ve
.PP
Loads the state of the wmc object from that saved in the current working
directory.
.SH "AUTHORS"
.IX Header "AUTHORS"
.RE
.IP "Mark Jaroski <mark@geekhive.net>"
.IX Item "Mark Jaroski <mark@geekhive.net>"
Original author
.RE
.IP "Mike Wesemann <mike@fhi\-berlin.mpg.de>"
.IX Item "Mike Wesemann <mike@fhi-berlin.mpg.de>"
Added support for Mediawiki 1.3.10+ edit tokens
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (c) 2004 Mark Jaroski. 
.PP
All rights reserved. This program is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.
