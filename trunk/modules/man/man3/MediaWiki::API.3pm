.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MediaWiki::API 3pm"
.TH MediaWiki::API 3pm "2009-09-09" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MediaWiki::API \- Provides a Perl interface to the MediaWiki API (http://www.mediawiki.org/wiki/API)
.SH "VERSION"
.IX Header "VERSION"
Version 0.28
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module provides an interface between Perl and the MediaWiki \s-1API\s0 (http://www.mediawiki.org/wiki/API) allowing creation of scripts to automate editing and extraction of data from MediaWiki driven sites like Wikipedia.
.PP
.Vb 1
\&  use MediaWiki::API;
\&
\&  my $mw = MediaWiki::API\->new();
\&  $mw\->{config}\->{api_url} = \*(Aqhttp://en.wikipedia.org/w/api.php\*(Aq;
\&
\&  # log in to the wiki
\&  $mw\->login( { lgname => \*(Aqusername\*(Aq, lgpassword => \*(Aqpassword\*(Aq } )
\&    || die $mw\->{error}\->{code} . \*(Aq: \*(Aq . $mw\->{error}\->{details};
\&
\&  # get a list of articles in category
\&  my $articles = $mw\->list ( {
\&    action => \*(Aqquery\*(Aq,
\&    list => \*(Aqcategorymembers\*(Aq,
\&    cmtitle => \*(AqCategory:Perl\*(Aq,
\&    cmlimit => \*(Aqmax\*(Aq } )
\&    || die $mw\->{error}\->{code} . \*(Aq: \*(Aq . $mw\->{error}\->{details};
\&
\&  # and print the article titles
\&  foreach (@{$articles}) {
\&      print "$_\->{title}\en";
\&  }
\&
\&  # get user info
\&  my $userinfo = $mw\->api( {
\&    action => \*(Aqquery\*(Aq,
\&    meta => \*(Aquserinfo\*(Aq,
\&    uiprop => \*(Aqblockinfo|hasmsg|groups|rights|options|editcount|ratelimits\*(Aq } );
\&
\&    ...
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS "MediaWiki::API\->new( $config_hashref )"
.el .SS "MediaWiki::API\->new( \f(CW$config_hashref\fP )"
.IX Subsection "MediaWiki::API->new( $config_hashref )"
Returns a MediaWiki \s-1API\s0 object. You can pass a config as a hashref when calling new, or set the configuration later. When creating a new object, defaults for max lag and retries are set.
.PP
.Vb 1
\&  my $mw = MediaWiki::API\->new( { api_url => \*(Aqhttp://en.wikipedia.org/w/api.php\*(Aq }  );
.Ve
.PP
Configuration options are
.IP "\(bu" 4
api_url = 'Path to mediawiki api.php';
.IP "\(bu" 4
files_url = 'Base url for files'; (needed if the api returns a relative \s-1URL\s0 for images like /images/a/picture.jpg)
.IP "\(bu" 4
upload_url = 'http://en.wikipedia.org/wiki/Special:Upload'; (path to the upload special page which is required if you want to upload images)
.IP "\(bu" 4
on_error = Function reference to call if an error occurs in the module.
.IP "\(bu" 4
use_http_get = Boolean 0 or 1 (defaults to 0). If set to 1, the perl module will use http \s-1GET\s0 method for accessing the api. By default it uses the \s-1POST\s0 method. Note that the module will still use \s-1POST\s0 for the api calls that require \s-1POST\s0 no matter what the value of this configuration option. Currently the following actions will work with \s-1GET:\s0 query, logout, purge, paraminfo.
.IP "\(bu" 4
retries = Integer value; The number of retries to send an \s-1API\s0 request if an http error or \s-1JSON\s0 decoding error occurs. Defaults to 0 (try only once \- don't retry). If max_retries is set to 4, and the wiki is down, the error won't be reported until after the 5th connection attempt.
.IP "\(bu" 4
retry_delay = Integer value in seconds; The amount of time to wait before retrying a request if an \s-1HTTP\s0 error or \s-1JSON\s0 decoding error occurs.
.IP "\(bu" 4
max_lag = Integer value in seconds; Wikipedia runs on a database cluster and as such high edit rates cause the slave servers to lag. If this config option is set then if the lag is more then the value of max_lag, the api will wait before retrying the request. 5 is a recommended value. More information about this subject can be found at http://www.mediawiki.org/wiki/Manual:Maxlag_parameter. note the config option includes an underscore so match the naming scheme of the other configuration options.
.IP "\(bu" 4
max_lag_delay = Integer value in seconds; This configuration option specified the delay to wait before retrying a request when the server has reported a lag more than the value of max_lag. This defaults to 5 if using the max_lag configuration option.
.IP "\(bu" 4
max_lag_retries = Integer value; The number of retries to send an \s-1API\s0 request if the server has reported a lag more than the value of max_lag. If the maximum retries is reached, an error is returned. Setting this to a negative value like \-1 will mean the request is resent until the servers max_lag is below the threshold or another error occurs. Defaults to 4.
.PP
An example for the on_error configuration could be something like:
.PP
.Vb 1
\&  $mw\->{config}\->{on_error} = \e&on_error;
\&
\&  sub on_error {
\&    print "Error code: " . $mw\->{error}\->{code} . "\en";
\&    print $mw\->{error}\->{stacktrace}."\en";
\&    die;
\&  }
.Ve
.PP
Errors are stored in \f(CW$mw\fR\->{error}\->{code} with more information in \f(CW$mw\fR\->{error}\->{details}. \f(CW$mw\fR\->{error}\->{stacktrace} includes
the details and a stacktrace to locate where any problems originated from (in some code which uses this module for example).
.PP
The error codes are as follows
.IP "\(bu" 4
\&\s-1ERR_NO_ERROR\s0 = 0 (No error)
.IP "\(bu" 4
\&\s-1ERR_CONFIG\s0   = 1 (An error with the configuration)
.IP "\(bu" 4
\&\s-1ERR_HTTP\s0     = 2 (An http related connection error)
.IP "\(bu" 4
\&\s-1ERR_API\s0      = 3 (An error returned by the MediaWiki \s-1API\s0)
.IP "\(bu" 4
\&\s-1ERR_LOGIN\s0    = 4 (An error logging in to the MediaWiki)
.IP "\(bu" 4
\&\s-1ERR_EDIT\s0     = 5 (An error with an editing function)
.IP "\(bu" 4
\&\s-1ERR_PARAMS\s0   = 6 (An error with parameters passed to a helper function)
.IP "\(bu" 4
\&\s-1ERR_UPLOAD\s0   = 7 (An error with the file upload facility)
.IP "\(bu" 4
\&\s-1ERR_DOWNLOAD\s0 = 8 (An error with downloading a file)
.PP
Other useful parameters and objects in the MediaWiki::API object are
.IP "\(bu" 4
MediaWiki::API\->{ua} = The LWP::UserAgent object. You could modify this to get or modify the cookies (MediaWiki::API\->{ua}\->cookie_jar) or to change the UserAgent string sent by this perl module (MediaWiki::API\->{ua}\->agent)
.IP "\(bu" 4
MediaWiki::API\->{response} = the last response object returned by the LWP::UserAgent after an \s-1API\s0 request.
.ie n .SS "MediaWiki::API\->login( $query_hashref )"
.el .SS "MediaWiki::API\->login( \f(CW$query_hashref\fP )"
.IX Subsection "MediaWiki::API->login( $query_hashref )"
Logs in to a MediaWiki. Parameters are those used by the MediaWiki \s-1API\s0 (http://www.mediawiki.org/wiki/API:Login). Returns a hashref with some login details, or undef on login failure. Errors are stored in MediaWiki::API\->{error}\->{code} and MediaWiki::API\->{error}\->{details}.
.PP
.Vb 1
\&  my $mw = MediaWiki::API\->new( { api_url => \*(Aqhttp://en.wikipedia.org/w/api.php\*(Aq }  );
\&
\&  #log in to the wiki
\&  $mw\->login( {lgname => \*(Aqusername\*(Aq, lgpassword => \*(Aqpassword\*(Aq } )
\&    || die $mw\->{error}\->{code} . \*(Aq: \*(Aq . $mw\->{error}\->{details};
.Ve
.ie n .SS "MediaWiki::API\->api( $query_hashref, $options_hashref )"
.el .SS "MediaWiki::API\->api( \f(CW$query_hashref\fP, \f(CW$options_hashref\fP )"
.IX Subsection "MediaWiki::API->api( $query_hashref, $options_hashref )"
Call the MediaWiki \s-1API\s0 interface. Parameters are passed as a hashref which are described on the MediaWiki \s-1API\s0 page (http://www.mediawiki.org/wiki/API). returns a hashref with the results of the call or undef on failure with the error code and details stored in MediaWiki::API\->{error}\->{code} and MediaWiki::API\->{error}\->{details}. MediaWiki::API uses the LWP::UserAgent module to send the http requests to the MediaWiki \s-1API\s0. After any \s-1API\s0 call, the response object returned by LWP::UserAgent is available in \f(CW$mw\fR\->{response};
.PP
.Vb 1
\&  binmode STDOUT, \*(Aq:utf8\*(Aq;
\&
\&  # get the name of the site
\&  if ( my $ref = $mw\->api( { action => \*(Aqquery\*(Aq, meta => \*(Aqsiteinfo\*(Aq } ) ) {
\&    print $ref\->{query}\->{general}\->{sitename};
\&  }
\&
\&  # list of titles for "Albert Einstein" in different languages.
\&  my $titles = $mw\->api( {
\&    action => \*(Aqquery\*(Aq,
\&    titles => \*(AqAlbert Einstein\*(Aq,
\&    prop => \*(Aqlanglinks\*(Aq,
\&    lllimit => \*(Aqmax\*(Aq } )
\&    || die $mw\->{error}\->{code} . \*(Aq: \*(Aq . $mw\->{error}\->{details};
\&
\&  my ($pageid,$langlinks) = each ( %{ $titles\->{query}\->{pages} } );
\&
\&  foreach ( @{ $langlinks\->{langlinks} } ) {
\&    print "$_\->{\*(Aq*\*(Aq}\en";
\&  }
.Ve
.PP
Parameters are encoded from perl strings to \s-1UTF\-8\s0 to be passed to Mediawiki automatically, which is normally what you would want. In case for any reason your parameters are already in \s-1UTF\-8\s0 you can skip the encoding by passing an option skip_encoding => 1 in the \f(CW$options_hash\fR. For example:
.PP
.Vb 2
\&  # $data already contains utf\-8 encoded wikitext
\&  my $ref = $mw\->api( { action => \*(Aqparse\*(Aq, text => $data }, { skip_encoding => 1 } );
.Ve
.SS "MediaWiki::API\->\fIlogout()\fP"
.IX Subsection "MediaWiki::API->logout()"
Log the current user out and clear associated cookies and edit tokens.
.ie n .SS "MediaWiki::API\->edit( $query_hashref, $options_hashref )"
.el .SS "MediaWiki::API\->edit( \f(CW$query_hashref\fP, \f(CW$options_hashref\fP )"
.IX Subsection "MediaWiki::API->edit( $query_hashref, $options_hashref )"
A helper function for doing edits using the MediaWiki \s-1API\s0. Parameters are passed as a hashref which are described on the MediaWiki \s-1API\s0 editing page (http://www.mediawiki.org/wiki/API:Changing_wiki_content). Note that you need \f(CW$wgEnableWriteAPI\fR = true in your LocalSettings.php to use these features.
.PP
Currently only
.IP "\(bu" 4
Create/Edit pages (Mediawiki >= 1.13 )
.IP "\(bu" 4
Move pages  (Mediawiki >= 1.12 )
.IP "\(bu" 4
Rollback  (Mediawiki >= 1.12 )
.IP "\(bu" 4
Delete pages  (Mediawiki >= 1.12 )
.PP
are supported via this call. Use this call to edit pages without having to worry about getting an edit token from the \s-1API\s0 first. The function will cache edit tokens to speed up future edits (Except for rollback edits, which are not cachable).
.PP
Returns a hashref with the results of the call or undef on failure with the error code and details stored in MediaWiki::API\->{error}\->{code} and MediaWiki::API\->{error}\->{details}.
.PP
The options hashref currently has one optional parameter (skip_encoding => 1). This is described above in the MediaWiki::API\->api call documentation.
.PP
Here are some example snippets of code. The first example is for adding some text to an existing page (if the page doesn't exist nothing will happen). Note that the timestamp for the revision we are changing is saved. This allows us to avoid edit conflicts. The value is passed back to the edit function, and if someone had edited the page in the meantime, an error will be returned.
.PP
.Vb 11
\&  my $pagename = "Wikipedia:Sandbox";
\&  my $ref = $mw\->get_page( { title => $pagename } );
\&  unless ( $ref\->{missing} ) {
\&    my $timestamp = $ref\->{timestamp};
\&    $mw\->edit( {
\&      action => \*(Aqedit\*(Aq,
\&      title => $pagename,
\&      basetimestamp => $timestamp, # to avoid edit conflicts
\&      text => $ref\->{\*(Aq*\*(Aq} . "\enAdditional text" } )
\&      || die $mw\->{error}\->{code} . \*(Aq: \*(Aq . $mw\->{error}\->{details};
\&  }
.Ve
.PP
The following code deletes a page with the name \*(L"DeleteMe\*(R". You can specify a reason for the deletion, otherwise
a generated reason will be used.
.PP
.Vb 4
\&  # delete a page
\&  $mw\->edit( {
\&    action => \*(Aqdelete\*(Aq, title => \*(AqDeleteMe\*(Aq, reason => \*(Aqno longer needed\*(Aq } ) 
\&    || die $mw\->{error}\->{code} . \*(Aq: \*(Aq . $mw\->{error}\->{details};
.Ve
.PP
This code moves a page from MoveMe to MoveMe2.
.PP
.Vb 4
\&  # move a page
\&  $mw\->edit( {
\&    action => \*(Aqmove\*(Aq, from => \*(AqMoveMe\*(Aq, to => \*(AqMoveMe2\*(Aq } )
\&    || die $mw\->{error}\->{code} . \*(Aq: \*(Aq . $mw\->{error}\->{details};
.Ve
.PP
The following scrippet rolls back one or more edits from user MrVandal. If the user is not the last editor of the page, an error will be returned. If no user is passed, the edits for whoever last changed the page will be rolled back.
.PP
.Vb 3
\&  $mw\->edit( {
\&    action => \*(Aqrollback\*(Aq, title => \*(AqSandbox\*(Aq, user => \*(AqMrVandal\*(Aq } )
\&    || die $mw\->{error}\->{code} . \*(Aq: \*(Aq . $mw\->{error}\->{details};
.Ve
.ie n .SS "MediaWiki::API\->get_page( $params_hashref )"
.el .SS "MediaWiki::API\->get_page( \f(CW$params_hashref\fP )"
.IX Subsection "MediaWiki::API->get_page( $params_hashref )"
A helper function for getting the most recent page contents (and other metadata) for a page. It calls the lower level api function with a revisions query to get the most recent revision.
.PP
.Vb 4
\&  # get some page contents
\&  my $page = $mw\->get_page( { title => \*(AqMain Page\*(Aq } );
\&  # print page contents
\&  print $page\->{\*(Aq*\*(Aq};
.Ve
.PP
Returns a hashref with the following keys or undef on an error. If the page is missing then the returned hashref will contain only ns, title and a key called \*(L"missing\*(R".
.IP "\(bu" 4
\&'*' \- contents of page
.IP "\(bu" 4
\&'pageid' \- page id of page
.IP "\(bu" 4
\&'revid' \- revision id of page
.IP "\(bu" 4
\&'timestamp' \- timestamp of revision
.IP "\(bu" 4
\&'user' \- user who made revision
.IP "\(bu" 4
\&'title' \- the title of the page
.IP "\(bu" 4
\&'ns' \- the namespace the page is in
.IP "\(bu" 4
\&'size' \- size of page in bytes
.PP
Full information about these can be read on (http://www.mediawiki.org/wiki/API:Query_\-_Properties#revisions_.2F_rv)
.ie n .SS "MediaWiki::API\->list( $query_hashref, $options_hashref )"
.el .SS "MediaWiki::API\->list( \f(CW$query_hashref\fP, \f(CW$options_hashref\fP )"
.IX Subsection "MediaWiki::API->list( $query_hashref, $options_hashref )"
A helper function for getting lists using the MediaWiki \s-1API\s0. Parameters are passed as a hashref which are described on the MediaWiki \s-1API\s0 editing page (http://www.mediawiki.org/wiki/API:Query_\-_Lists).
.PP
This function will return a reference to an array of hashes or undef on failure. It handles getting lists of data from the MediaWiki api, continuing the request with another connection if needed. The options_hashref currently has three parameters:
.IP "\(bu" 4
max => value
.IP "\(bu" 4
hook => \e&function_hook
.IP "\(bu" 4
skip_encoding => 1
.PP
The value of max specifies the maximum \*(L"queries\*(R" which will be used to pull data out. For example the default limit per query is 10 items, but this can be raised to 500 for normal users and higher for sysops and bots. If the limit is raised to 500 and max was set to 2, a maximum of 1000 results would be returned.
.PP
If you wish to process large lists, for example the articles in a large category, you can pass a hook function, which will be passed a reference to an array of results for each query connection.
.PP
The skip_encoding parameter works as described above in the MediaWiki::API\->api call documentation.
.PP
.Vb 1
\&  binmode STDOUT, \*(Aq:utf8\*(Aq;
\&
\&  # process the first 400 articles in the main namespace in the category "Surnames".
\&  # get 100 at a time, with a max of 4 and pass each 100 to our hook.
\&  $mw\->list ( { action => \*(Aqquery\*(Aq,
\&                list => \*(Aqcategorymembers\*(Aq,
\&                cmtitle => \*(AqCategory:Surnames\*(Aq,
\&                cmnamespace => 0,
\&                cmlimit=>\*(Aq100\*(Aq },
\&              { max => 4, hook => \e&print_articles } )
\&  || die $mw\->{error}\->{code} . \*(Aq: \*(Aq . $mw\->{error}\->{details};
\&
\&  # print the name of each article
\&  sub print_articles {
\&    my ($ref) = @_;
\&    foreach (@$ref) {
\&      print "$_\->{title}\en";
\&    }
\&  }
.Ve
.ie n .SS "MediaWiki::API\->upload( $params_hashref )"
.el .SS "MediaWiki::API\->upload( \f(CW$params_hashref\fP )"
.IX Subsection "MediaWiki::API->upload( $params_hashref )"
A function to upload files to a MediaWiki. This function does not use the MediaWiki \s-1API\s0 currently as support for file uploading is not yet implemented. Instead it uploads using the Special:Upload page, and as such an additional configuration value is needed.
.PP
.Vb 4
\&  my $mw = MediaWiki::API\->new( {
\&   api_url => \*(Aqhttp://en.wikipedia.org/w/api.php\*(Aq }  );
\&  # configure the special upload location.
\&  $mw\->{config}\->{upload_url} = \*(Aqhttp://en.wikipedia.org/wiki/Special:Upload\*(Aq;
.Ve
.PP
The upload function is then called as follows
.PP
.Vb 8
\&  # upload a file to MediaWiki
\&  open FILE, "myfile.jpg" or die $!;
\&  binmode FILE;
\&  my ($buffer, $data);
\&  while ( read(FILE, $buffer, 65536) )  {
\&    $data .= $buffer;
\&  }
\&  close(FILE);
\&
\&  $mw\->upload( { title => \*(Aqfile.jpg\*(Aq,
\&                 summary => \*(AqThis is the summary to go on the Image:file.jpg page\*(Aq,
\&                 data => $data } ) || die $mw\->{error}\->{code} . \*(Aq: \*(Aq . $mw\->{error}\->{details};
.Ve
.PP
Error checking is limited. Also note that the module will force a file upload, ignoring any warning for file size or overwriting an old file.
.ie n .SS "MediaWiki::API\->download( $params_hashref )"
.el .SS "MediaWiki::API\->download( \f(CW$params_hashref\fP )"
.IX Subsection "MediaWiki::API->download( $params_hashref )"
A function to download images/files from a MediaWiki. A file url may need to be configured if the api returns a relative \s-1URL\s0.
.PP
.Vb 4
\&  my $mw = MediaWiki::API\->new( {
\&    api_url => \*(Aqhttp://www.exotica.org.uk/mediawiki/api.php\*(Aq }  );
\&  # configure the file url. Wikipedia doesn\*(Aqt need this but the ExoticA wiki does.
\&  $mw\->{config}\->{files_url} = \*(Aqhttp://www.exotica.org.uk\*(Aq;
.Ve
.PP
The download function is then called as follows
.PP
.Vb 2
\&  my $file = $mw\->download( { title => \*(AqImage:Mythic\-Beasts_Logo.png\*(Aq} )
\&    || die $mw\->{error}\->{code} . \*(Aq: \*(Aq . $mw\->{error}\->{details};
.Ve
.PP
If the file does not exist (on the wiki) an empty string is returned. If the file is unable to be downloaded undef is returned.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jools 'BuZz' Wills, \f(CW\*(C`<buzz [at] exotica.org.uk>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-mediawiki\-api at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=MediaWiki\-API>.  I will be notified, and then you'll automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc MediaWiki::API
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=MediaWiki\-API>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/MediaWiki\-API>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/MediaWiki\-API>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/MediaWiki\-API>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.IP "\(bu" 4
Carl Beckhorn (cbeckhorn [at] fastmail.fm) for ideas and support
.IP "\(bu" 4
Stuart 'Kyzer' Caie (kyzer [at] 4u.net) for UnExoticA perl code and support
.IP "\(bu" 4
Edward Chernenko (edwardspec [at] gmail.com) for his earlier MediaWiki module
.IP "\(bu" 4
Dan Collins (\s-1EN\s0.WP.ST47 [at] gmail.com) for bug reports and patches
.IP "\(bu" 4
Jonas 'Spectral' Nyren (spectral [at] ludd.luth.se) for hints and tips!
.IP "\(bu" 4
Jason 'XtC' Skelly (xtc [at] amigaguide.org) for moral support
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2008 Jools Wills, all rights reserved.
.PP
This program is free software: you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
