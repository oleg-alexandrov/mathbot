.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MediaWiki::Bot 3pm"
.TH MediaWiki::Bot 3pm "2010-04-10" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MediaWiki::Bot \- a Wikipedia bot framework written in Perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use MediaWiki::Bot;
.PP
my \f(CW$editor\fR = MediaWiki::Bot\->new('Account');
\&\f(CW$editor\fR\->login('Account', 'password');
\&\f(CW$editor\fR\->revert('Wikipedia:Sandbox', 'Reverting vandalism', '38484848');
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MediaWiki::Bot is a framework that can be used to write Wikipedia bots.
.PP
Many of the methods use the MediaWiki \s-1API\s0 (<http://en.wikipedia.org/w/api.php>).
.SH "AUTHOR"
.IX Header "AUTHOR"
The MediaWiki::Bot team (Alex Rowe, Jmax, Oleg Alexandrov, Dan Collins) and others.
.SH "COPYING"
.IX Header "COPYING"
Copyright (C) 2006, 2007 by the MediaWiki::Bot team
.PP
This library is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.
.PP
This library is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "new([$agent[, $assert[, $operator]]])" 4
.el .IP "new([$agent[, \f(CW$assert\fR[, \f(CW$operator\fR]]])" 4
.IX Item "new([$agent[, $assert[, $operator]]])"
Calling MediaWiki::Bot\->new will create a new MediaWiki::Bot object. 
\&\f(CW$agent\fR sets a custom useragent, \f(CW$assert\fR sets a parameter for the assertedit extension, common is \*(L"&assert=bot\*(R", \f(CW$operator\fR allows the bot to send you a message when it fails an assert. The message will tell you that \f(CW$agent\fR is logged out, so use a descriptive \f(CW$agent\fR. \f(CW$protocol\fR allows you to specify 'http' or 'https' (default is 'http'). For example:
.Sp
\&\f(CW$bot\fR = MediaWiki::Bot\->new(\*(L"MediaWiki::Bot\*(R", undef, undef, 5, \*(L"https\*(R");
.IP "set_highlimits([$flag])" 4
.IX Item "set_highlimits([$flag])"
Tells MediaWiki::Bot to start using the APIHighLimits for certain queries.
.IP "set_wiki([$wiki_host[,$wiki_path]])" 4
.IX Item "set_wiki([$wiki_host[,$wiki_path]])"
set_wiki will cause the MediaWiki::Bot object to use the wiki specified, e.g set_wiki('de.wikipedia.org','w') will tell it to use http://de.wikipedia.org/w/index.php. The default settings are 'en.wikipedia.org' with a path of 'w'.
.IP "login($username,$password)" 4
.IX Item "login($username,$password)"
Logs the object into the specified wiki. If the login was a success, it will return 'Success', otherwise, 'Fail'.
.IP "edit($pagename,$page_text,[$edit_summary],[$is_minor],[$assert])" 4
.IX Item "edit($pagename,$page_text,[$edit_summary],[$is_minor],[$assert])"
Edits the specified page \f(CW$pagename\fR and replaces it with \f(CW$page_text\fR with an edit summary of \f(CW$edit_summary\fR, optionally marking the edit as minor if specified, and adding an assertion, if requested. Assertions should be of the form \*(L"user\*(R".
.IP "get_history($pagename,$limit)" 4
.IX Item "get_history($pagename,$limit)"
Returns an array containing the history of the specified page, with \f(CW$limit\fR number of revisions. The array structure contains 'revid','user','comment','timestamp_date', and 'timestamp_time'.
.IP "get_text($pagename,[$revid,$section_number])" 4
.IX Item "get_text($pagename,[$revid,$section_number])"
Returns the text of the specified page. If \f(CW$revid\fR is defined, it will return the text of that revision; if \f(CW$section_number\fR is defined, it will return the text of that section. Returns 2 if page does not exist.
.IP "get_id($pagename)" 4
.IX Item "get_id($pagename)"
Returns the id of the specified page. Returns 2 if page does not exist.
.IP "get_pages(@pages)" 4
.IX Item "get_pages(@pages)"
Returns the text of the specified pages in a hashref. Content of '2' means page does not exist.
Also handles redirects or article names that use namespace aliases
.IP "revert($pagename,$edit_summary,$old_revision_id)" 4
.IX Item "revert($pagename,$edit_summary,$old_revision_id)"
Reverts the specified page to \f(CW$old_revision_id\fR, with an edit summary of \f(CW$edit_summary\fR.
.IP "undo($pagename,$edit_summary,$revision_id,$after)" 4
.IX Item "undo($pagename,$edit_summary,$revision_id,$after)"
Reverts the specified page to \f(CW$revision_id\fR, with an edit summary of \f(CW$edit_summary\fR, using the undo function. To use old revision id instead of new, set last param to 'after'.
.IP "get_last($pagename,$username)" 4
.IX Item "get_last($pagename,$username)"
Returns the number of the last revision not made by \f(CW$username\fR.
.IP "update_rc([$limit])" 4
.IX Item "update_rc([$limit])"
Returns an array containing the Recent Changes to the wiki Main namespace. The array structure contains 'pagename', 'revid', 'oldid', 'timestamp_date', and 'timestamp_time'.
.IP "what_links_here($pagename)" 4
.IX Item "what_links_here($pagename)"
Returns an array containing a list of all pages linking to the given page. The array structure contains 'title' and 'type', the type being a transclusion, redirect, or neither.
.IP "get_pages_in_category($category_name)" 4
.IX Item "get_pages_in_category($category_name)"
Returns an array containing the names of all pages in the specified category. Does not go into sub-categories.
.IP "get_all_pages_in_category($category_name)" 4
.IX Item "get_all_pages_in_category($category_name)"
Returns an array containing the names of \s-1ALL\s0 pages in the specified category, including sub-categories.
.IP "linksearch($link)" 4
.IX Item "linksearch($link)"
Runs a linksearch on the specified link and returns an array containing anonymous hashes with keys \*(L"link\*(R" for the outbound link name, and \*(L"page\*(R" for the page the link is on.
.IP "purge_page($pagename)" 4
.IX Item "purge_page($pagename)"
Purges the server cache of the specified page.
.IP "get_namespace_names" 4
.IX Item "get_namespace_names"
get_namespace_names returns a hash linking the namespace id, such as 1, to its named equivalent, such as \*(L"Talk\*(R".
.IP "links_to_image($page)" 4
.IX Item "links_to_image($page)"
Gets a list of pages which include a certain image.
.IP "test_blocked($user)" 4
.IX Item "test_blocked($user)"
Checks if a user is currently blocked.
.IP "test_image_exists($page)" 4
.IX Item "test_image_exists($page)"
Checks if an image exists at \f(CW$page\fR. 0 means no, 1 means yes, local, 2 means on commons, 3 means doesn't exist but there is text on the page.
.ie n .IP "delete_page($page[, $summary])" 4
.el .IP "delete_page($page[, \f(CW$summary\fR])" 4
.IX Item "delete_page($page[, $summary])"
Deletes the page with the specified summary.
.ie n .IP "delete_old_image($page, $revision[, $summary])" 4
.el .IP "delete_old_image($page, \f(CW$revision\fR[, \f(CW$summary\fR])" 4
.IX Item "delete_old_image($page, $revision[, $summary])"
Deletes the specified revision of the image with the specified summary.
.ie n .IP "block($user, $length, $summary, $anononly, $autoblock, $blockaccountcreation, $blockemail, $blocktalk)" 4
.el .IP "block($user, \f(CW$length\fR, \f(CW$summary\fR, \f(CW$anononly\fR, \f(CW$autoblock\fR, \f(CW$blockaccountcreation\fR, \f(CW$blockemail\fR, \f(CW$blocktalk\fR)" 4
.IX Item "block($user, $length, $summary, $anononly, $autoblock, $blockaccountcreation, $blockemail, $blocktalk)"
Blocks the user with the specified options.  All options optional except \f(CW$user\fR and \f(CW$length\fR. Last four are true/false. Defaults to empty summary, all options disabled.
.IP "unblock($user)" 4
.IX Item "unblock($user)"
Unblocks the user.
.ie n .IP "protect($page, $reason, $editlvl, $movelvl, $time, $cascade)" 4
.el .IP "protect($page, \f(CW$reason\fR, \f(CW$editlvl\fR, \f(CW$movelvl\fR, \f(CW$time\fR, \f(CW$cascade\fR)" 4
.IX Item "protect($page, $reason, $editlvl, $movelvl, $time, $cascade)"
Protects (or unprotects) the page. \f(CW$editlvl\fR and \f(CW$movelvl\fR may be '', 'autoconfirmed', or 'sysop'. \f(CW$cascade\fR is true/false.
.IP "get_pages_in_namespace($namespace_id,$page_limit)" 4
.IX Item "get_pages_in_namespace($namespace_id,$page_limit)"
Returns an array containing the names of all pages in the specified namespace. The \f(CW$namespace_id\fR must be a number, not a namespace name. Setting \f(CW$page_limit\fR is optional. If \f(CW$page_limit\fR is over 500, it will be rounded up to the next multiple of 500.
.IP "count_contributions($user)" 4
.IX Item "count_contributions($user)"
Uses the \s-1API\s0 to count \f(CW$user\fR's contributions.
.IP "last_active($user)" 4
.IX Item "last_active($user)"
Returns the last active time of \f(CW$user\fR in \s-1YYYY\-MM\-DDTHH:MM:SSZ\s0
.IP "recent_edit_to_page($page)" 4
.IX Item "recent_edit_to_page($page)"
Returns timestamp and username for most recent edit to \f(CW$page\fR.
.ie n .IP "get_users($page, $limit, $revision, $direction)" 4
.el .IP "get_users($page, \f(CW$limit\fR, \f(CW$revision\fR, \f(CW$direction\fR)" 4
.IX Item "get_users($page, $limit, $revision, $direction)"
Gets the most recent editors to \f(CW$page\fR, up to \f(CW$limit\fR, starting from \f(CW$revision\fR and goint in \f(CW$direction\fR.
.IP "test_block_hist($user)" 4
.IX Item "test_block_hist($user)"
Returns 1 if \f(CW$user\fR has been blocked.
.ie n .IP "expandtemplates($page[, $text])" 4
.el .IP "expandtemplates($page[, \f(CW$text\fR])" 4
.IX Item "expandtemplates($page[, $text])"
Expands templates on \f(CW$page\fR, using \f(CW$text\fR if provided, otherwise loading the page text automatically.
.ie n .IP "undelete($page, $summary)" 4
.el .IP "undelete($page, \f(CW$summary\fR)" 4
.IX Item "undelete($page, $summary)"
Undeletes \f(CW$page\fR with \f(CW$summary\fR.
.IP "get_allusers($limit)" 4
.IX Item "get_allusers($limit)"
Returns an array of all users. Default limit is 500.
.SH "ERROR HANDLING"
.IX Header "ERROR HANDLING"
All functions will return an integer error value in any handled error
situation. Error codes are stored in \f(CW$agent\fR\->{error}\->{code}, error text
in \f(CW$agent\fR\->{error}\->{details}.
