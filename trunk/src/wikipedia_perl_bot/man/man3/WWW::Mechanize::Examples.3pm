.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WWW::Mechanize::Examples 3pm"
.TH WWW::Mechanize::Examples 3pm "2007-02-13" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
WWW::Mechanize::Examples \- Sample programs that use WWW::Mechanize
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Plenty of people have learned WWW::Mechanize, and now, you can too!
.PP
Following are user-supplied samples of WWW::Mechanize in action.
If you have samples you'd like to contribute, please send 'em to
\&\f(CW\*(C`<andy@petdance.com>\*(C'\fR.
.PP
You can also look at the \fIt/*.t\fR files in the distribution.
.PP
Please note that these examples are not intended to do any specific task.
For all I know, they're no longer functional because the sites they
hit have changed.  They're here to give examples of how people have
used WWW::Mechanize.
.PP
Note that the examples are in reverse order of my having received them,
so the freshest examples are always at the top.
.Sh "Starbucks Density Calculator, by Nat Torkington"
.IX Subsection "Starbucks Density Calculator, by Nat Torkington"
Here's a pair of scripts from Nat Torkington, editor for O'Reilly Media
and co-author of the \fIPerl Cookbook\fR.
.Sp
.RS 4
Rael [Dornfest] discovered that you can easily find out how many Starbucks
there are in an area by searching for \*(L"Starbucks\*(R".  So I wrote a silly
scraper for some old census data and came up with some Starbucks density
figures.  There's no meaning to these numbers thanks to errors from using
old census data coupled with false positives in Yahoo search (e.g.,
\&\*(L"Dodie Starbuck-Your Style Desgn\*(R" in Portland \s-1OR\s0).  But it was fun to
waste a night on.
.Sp
Here are the top twenty cities in descending order of population,
with the amount of territory each Starbucks has.  E.g., A New York \s-1NY\s0
Starbucks covers 1.7 square miles of ground.
.Sp
.Vb 20
\&    New York, NY        1.7
\&    Los Angeles, CA     1.2
\&    Chicago, IL         1.0
\&    Houston, TX         4.6
\&    Philadelphia, PA    6.8
\&    San Diego, CA       2.7
\&    Detroit, MI        19.9
\&    Dallas, TX          2.7
\&    Phoenix, AZ         4.1
\&    San Antonio, TX    12.3
\&    San Jose, CA        1.1
\&    Baltimore, MD       3.9
\&    Indianapolis, IN   12.1
\&    San Francisco, CA   0.5
\&    Jacksonville, FL   39.9
\&    Columbus, OH        7.3
\&    Milwaukee, WI       5.1
\&    Memphis, TN        15.1
\&    Washington, DC      1.4
\&    Boston, MA          0.5
.Ve
.RE
.PP
\&\f(CW\*(C`get_pop_data\*(C'\fR
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
.Ve
.PP
.Vb 2
\&    use WWW::Mechanize;
\&    use Storable;
.Ve
.PP
.Vb 3
\&    $url = 'http://www.census.gov/population/www/documentation/twps0027.html';
\&    $m = WWW::Mechanize\->new();
\&    $m\->get($url);
.Ve
.PP
.Vb 1
\&    $c = $m\->content;
.Ve
.PP
.Vb 14
\&    $c =~ m{<A NAME=.tabA.>(.*?)</TABLE>}s
\&      or die "Can't find the population table\en";
\&    $t = $1;
\&    @outer = $t =~ m{<TR.*?>(.*?)</TR>}gs;
\&    shift @outer;
\&    foreach $r (@outer) {
\&      @bits = $r =~ m{<TD.*?>(.*?)</TD>}gs;
\&      for ($x = 0; $x < @bits; $x++) {
\&        $b = $bits[$x];
\&        @v = split /\es*<BR>\es*/, $b;
\&        foreach (@v) { s/^\es+//; s/\es+$// }
\&        push @{$data[$x]}, @v;
\&      }
\&    }
.Ve
.PP
.Vb 9
\&    for ($y = 0; $y < @{$data[0]}; $y++) {
\&        $data{$data[1][$y]} = {
\&            NAME => $data[1][$y],
\&            RANK => $data[0][$y],
\&            POP  => comma_free($data[2][$y]),
\&            AREA => comma_free($data[3][$y]),
\&            DENS => comma_free($data[4][$y]),
\&        };
\&    }
.Ve
.PP
.Vb 1
\&    store(\e%data, "cities.dat");
.Ve
.PP
.Vb 5
\&    sub comma_free {
\&      my $n = shift;
\&      $n =~ s/,//;
\&      return $n;
\&    }
.Ve
.PP
\&\f(CW\*(C`plague_of_coffee\*(C'\fR
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
.Ve
.PP
.Vb 3
\&    use WWW::Mechanize;
\&    use strict;
\&    use Storable;
.Ve
.PP
.Vb 1
\&    $SIG{__WARN__} = sub {} ;  # ssssssh
.Ve
.PP
.Vb 1
\&    my $Cities = retrieve("cities.dat");
.Ve
.PP
.Vb 2
\&    my $m = WWW::Mechanize\->new();
\&    $m\->get("http://local.yahoo.com/");
.Ve
.PP
.Vb 6
\&    my @cities = sort { $Cities\->{$a}{RANK} <=> $Cities\->{$b}{RANK} } keys %$Cities;
\&    foreach my $c ( @cities ) {
\&      my $fields = {
\&        'stx' => "starbucks",
\&        'csz' => $c,
\&      };
.Ve
.PP
.Vb 3
\&      my $r = $m\->submit_form(form_number => 2,
\&                              fields => $fields);
\&      die "Couldn't submit form" unless $r\->is_success;
.Ve
.PP
.Vb 6
\&      my $hits = number_of_hits($r);
\&      #  my $ppl  = sprintf("%d", 1000 * $Cities\->{$c}{POP} / $hits);
\&      #  print "$c has $hits Starbucks.  That's one for every $ppl people.\en";
\&      my $density = sprintf("%.1f", $Cities\->{$c}{AREA} / $hits);
\&      print "$c : $density\en";
\&    }
.Ve
.PP
.Vb 23
\&    sub number_of_hits {
\&      my $r = shift;
\&      my $c = $r\->content;
\&      if ($c =~ m{\ed+ out of <b>(\ed+)</b> total results for}) {
\&        return $1;
\&      }
\&      if ($c =~ m{Sorry, no .*? found in or near}) {
\&        return 0;
\&      }
\&      if ($c =~ m{Your search matched multiple cities}) {
\&        warn "Your search matched multiple cities\en";
\&        return 0;
\&      }
\&      if ($c =~ m{Sorry we couldn.t find that location}) {
\&        warn "No cities\en";
\&        return 0;
\&      }
\&      if ($c =~ m{Could not find.*?, showing results for}) {
\&        warn "No matches\en";
\&        return 0;
\&      }
\&      die "Unknown response\en$c\en";
\&    }
.Ve
.Sh "pb\-upload, by John Beppu"
.IX Subsection "pb-upload, by John Beppu"
This script takes filenames of images from the command line and
uploads them to a www.photobucket.com folder.  John Beppu, the author, says:
.Sp
.RS 4
I had 92 pictures I wanted to upload, and doing it through a browser
would've been torture.  But thanks to mech, all I had to do was
`./pb.upload *.jpg` and watch it do its thing.  It felt good.
If I had more time, I'd implement WWW::Photobucket on top of
WWW::Mechanize.
.RE
.PP
.Vb 1
\&    #!/usr/bin/perl \-w \-T
.Ve
.PP
.Vb 2
\&    use strict;
\&    use WWW::Mechanize;
.Ve
.PP
.Vb 3
\&    my $login    = "login_name";
\&    my $password = "password";
\&    my $folder   = "folder";
.Ve
.PP
.Vb 1
\&    my $url = "http://img78.photobucket.com/albums/v281/$login/$folder/";
.Ve
.PP
.Vb 8
\&    # login to your photobucket.com account
\&    my $mech = WWW::Mechanize\->new();
\&    $mech\->get($url);
\&    $mech\->submit_form(
\&        form_number => 1,
\&        fields      => { password => $password },
\&    );
\&    die unless ($mech\->success);
.Ve
.PP
.Vb 7
\&    # upload image files specified on command line
\&    foreach (@ARGV) {
\&        print "$_\en";
\&        $mech\->form_number(2);
\&        $mech\->field('the_file[]' => $_);
\&        $mech\->submit();
\&    }
.Ve
.Sh "listmod, by Ian Langworth"
.IX Subsection "listmod, by Ian Langworth"
Ian Langworth contributes this little gem that will bring joy to
beleagured mailing list admins.  It discards spam messages through
mailman's web interface.
.PP
.Vb 8
\&    #!/arch/unix/bin/perl
\&    use strict;
\&    use warnings;
\&    #
\&    # listmod \- fast alternative to mailman list interface
\&    #
\&    # usage: listmod crew XXXXXXXX
\&    #
.Ve
.PP
.Vb 2
\&    die "usage: $0 <listname> <password>\en" unless @ARGV == 2;
\&    my ($listname, $password) = @ARGV;
.Ve
.PP
.Vb 1
\&    use CGI qw(unescape);
.Ve
.PP
.Vb 2
\&    use WWW::Mechanize;
\&    my $m = WWW::Mechanize\->new( autocheck => 1 );
.Ve
.PP
.Vb 2
\&    use Term::ReadLine;
\&    my $term = Term::ReadLine\->new($0);
.Ve
.PP
.Vb 4
\&    # submit the form, get the cookie, go to the list admin page
\&    $m\->get("https://lists.ccs.neu.edu/bin/admindb/$listname");
\&    $m\->set_visible( $password );
\&    $m\->click;
.Ve
.PP
.Vb 3
\&    # exit if nothing to do
\&    print "There are no pending requests.\en" and exit
\&        if $m\->content =~ /There are no pending requests/;
.Ve
.PP
.Vb 3
\&    # select the first form and examine its contents
\&    $m\->form_number(1);
\&    my $f = $m\->current_form or die "Couldn't get first form!\en";
.Ve
.PP
.Vb 3
\&    # get me the base form element for each email item
\&    my @items = map {m/^.+?\-(.+)/} grep {m/senderbanp/} $f\->param
\&        or die "Couldn't get items in first form!\en";
.Ve
.PP
.Vb 2
\&    # iterate through items, prompt user, commit actions
\&    foreach my $item (@items) {
.Ve
.PP
.Vb 4
\&        # show item info
\&        my $sender = unescape($item);
\&        my ($subject) = [$f\->find_input("senderbanp\-$item")\->value_names]\->[1] 
\&            =~ /Subject:\es+(.+?)\es+Size:/g;
.Ve
.PP
.Vb 7
\&        # prompt user
\&        my $choice = '';
\&        while ( $choice !~ /^[DAX]$/ ) {
\&            print "$sender\e: '$subject'\en";
\&            $choice = uc $term\->readline("Action: defer/accept/discard [dax]: ");
\&            print "\en\en";
\&        }
.Ve
.PP
.Vb 3
\&        # set button
\&        $m\->field("senderaction\-$item" => {D=>0,A=>1,X=>3}\->{$choice});
\&    }
.Ve
.PP
.Vb 2
\&    # submit actions
\&    $m\->click;
.Ve
.Sh "ccdl, by Andy Lester"
.IX Subsection "ccdl, by Andy Lester"
Steve McConnell, author of the landmark \fICode Complete\fR has put
up the chapters for the 2nd edition in \s-1PDF\s0 format on his website.
I needed to download them to take to Kinko's to have printed.  This
little script did it for me.
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
.Ve
.PP
.Vb 2
\&    use strict;
\&    use WWW::Mechanize;
.Ve
.PP
.Vb 1
\&    my $start = "http://www.stevemcconnell.com/cc2/cc.htm";
.Ve
.PP
.Vb 2
\&    my $mech = WWW::Mechanize\->new( autocheck => 1 );
\&    $mech\->get( $start );
.Ve
.PP
.Vb 1
\&    my @links = $mech\->find_all_links( url_regex => qr/\ed+.+\e.pdf$/ );
.Ve
.PP
.Vb 4
\&    for my $link ( @links ) {
\&        my $url = $link\->url_abs;
\&        my $filename = $url;
\&        $filename =~ s[^.+/][];
.Ve
.PP
.Vb 2
\&        print "Fetching $url";
\&        $mech\->get( $url, ':content_file' => $filename );
.Ve
.PP
.Vb 2
\&        print "   ", \-s $filename, " bytes\en";
\&    }
.Ve
.Sh "quotes.pl, by Andy Lester"
.IX Subsection "quotes.pl, by Andy Lester"
This was a script that was going to get a hack in \fISpidering Hacks\fR,
but got cut at the last minute, probably because it's against \s-1IMDB\s0's \s-1TOS\s0
to scrape from it.  I present it here as an example, not a suggestion
that you break their \s-1TOS\s0.
.PP
Last I checked, it didn't work because their \s-1HTML\s0 didn't match, but it's
still good as sample code.
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
.Ve
.PP
.Vb 1
\&    use strict;
.Ve
.PP
.Vb 3
\&    use WWW::Mechanize;
\&    use Getopt::Long;
\&    use Text::Wrap;
.Ve
.PP
.Vb 6
\&    my $match = undef;
\&    my $random = undef;
\&    GetOptions(
\&        "match=s" => \e$match,
\&        "random" => \e$random,
\&    ) or exit 1;
.Ve
.PP
.Vb 1
\&    my $movie = shift @ARGV or die "Must specify a movie\en";
.Ve
.PP
.Vb 2
\&    my $quotes_page = get_quotes_page( $movie );
\&    my @quotes = extract_quotes( $quotes_page );
.Ve
.PP
.Vb 4
\&    if ( $match ) {
\&        $match = quotemeta($match);
\&        @quotes = grep /$match/i, @quotes;
\&    }
.Ve
.PP
.Vb 5
\&    if ( $random ) {
\&        print $quotes[rand @quotes];
\&    } else {
\&        print join( "\en", @quotes );
\&    }
.Ve
.PP
.Vb 2
\&    sub get_quotes_page {
\&        my $movie = shift;
.Ve
.PP
.Vb 3
\&        my $mech = new WWW::Mechanize;
\&        $mech\->get( "http://www.imdb.com/search" );
\&        $mech\->success or die "Can't get the search page";
.Ve
.PP
.Vb 7
\&        $mech\->submit_form(
\&        form_number => 2,
\&        fields => {
\&            title       => $movie,
\&            restrict    => "Movies only",
\&        },
\&        );
.Ve
.PP
.Vb 2
\&        my @links = $mech\->find_all_links( url_regex => qr[^/Title] )
\&        or die "No matches for \e"$movie\e" were found.\en";
.Ve
.PP
.Vb 2
\&        # Use the first link
\&        my ( $url, $title ) = @{$links[0]};
.Ve
.PP
.Vb 1
\&        warn "Checking $title...\en";
.Ve
.PP
.Vb 3
\&        $mech\->get( $url );
\&        my $link = $mech\->find_link( text_regex => qr/Memorable Quotes/i )
\&        or die qq{"$title" has no quotes in IMDB!\en};
.Ve
.PP
.Vb 2
\&        warn "Fetching quotes...\en\en";
\&        $mech\->get( $link\->[0] );
.Ve
.PP
.Vb 2
\&        return $mech\->content;
\&    }
.Ve
.PP
.Vb 2
\&    sub extract_quotes {
\&        my $page = shift;
.Ve
.PP
.Vb 3
\&        # Nibble away at the unwanted HTML at the beginnning...
\&        $page =~ s/.+Memorable Quotes//si;
\&        $page =~ s/.+?(<a name)/$1/si;
.Ve
.PP
.Vb 3
\&        # ... and the end of the page
\&        $page =~ s/Browse titles in the movie quotes.+$//si;
\&        $page =~ s/<p.+$//g;
.Ve
.PP
.Vb 2
\&        # Quotes separated by an <HR> tag
\&        my @quotes = split( /<hr.+?>/, $page );
.Ve
.PP
.Vb 8
\&        for my $quote ( @quotes ) {
\&        my @lines = split( /<br>/, $quote );
\&        for ( @lines ) {
\&            s/<[^>]+>//g;   # Strip HTML tags
\&            s/\es+/ /g;      # Squash whitespace
\&            s/^ //;         # Strip leading space
\&            s/ $//;         # Strip trailing space
\&            s/&#34;/"/g;    # Replace HTML entity quotes
.Ve
.PP
.Vb 6
\&            # Word\-wrap to fit in 72 columns
\&            $Text::Wrap::columns = 72;
\&            $_ = wrap( '', '    ', $_ );
\&        }
\&        $quote = join( "\en", @lines );
\&        }
.Ve
.PP
.Vb 2
\&        return @quotes;
\&    }
.Ve
.Sh "cpansearch.pl, by Ed Silva"
.IX Subsection "cpansearch.pl, by Ed Silva"
A quick little utility to search the \s-1CPAN\s0 and fire up a browser
with a results page.
.PP
.Vb 1
\&    #!/usr/bin/perl
.Ve
.PP
.Vb 3
\&    # turn on perl's safety features
\&    use strict;
\&    use warnings;
.Ve
.PP
.Vb 3
\&    # work out the name of the module we're looking for
\&    my $module_name = $ARGV[0]
\&      or die "Must specify module name on command line";
.Ve
.PP
.Vb 3
\&    # create a new browser
\&    use WWW::Mechanize;
\&    my $browser = WWW::Mechanize\->new();
.Ve
.PP
.Vb 2
\&    # tell it to get the main page
\&    $browser\->get("http://search.cpan.org/");
.Ve
.PP
.Vb 5
\&    # okay, fill in the box with the name of the
\&    # module we want to look up
\&    $browser\->form_number(1);
\&    $browser\->field("query", $module_name);
\&    $browser\->click();
.Ve
.PP
.Vb 2
\&    # click on the link that matches the module name
\&    $browser\->follow_link( text_regex => $module_name );
.Ve
.PP
.Vb 1
\&    my $url = $browser\->uri;
.Ve
.PP
.Vb 2
\&    # launch a browser...
\&    system('galeon', $url);
.Ve
.PP
.Vb 1
\&    exit(0);
.Ve
.Sh "lj_friends.cgi, by Matt Cashner"
.IX Subsection "lj_friends.cgi, by Matt Cashner"
.Vb 1
\&    #!/usr/bin/perl
.Ve
.PP
.Vb 4
\&    # Provides an rss feed of a paid user's LiveJournal friends list
\&    # Full entries, protected entries, etc.
\&    # Add to your favorite rss reader as
\&    # http://your.site.com/cgi\-bin/lj_friends.cgi?user=USER&password=PASSWORD
.Ve
.PP
.Vb 2
\&    use warnings;
\&    use strict;
.Ve
.PP
.Vb 2
\&    use WWW::Mechanize;
\&    use CGI;
.Ve
.PP
.Vb 2
\&    my $cgi = CGI\->new();
\&    my $form = $cgi\->Vars;
.Ve
.PP
.Vb 1
\&    my $agent = WWW::Mechanize\->new();
.Ve
.PP
.Vb 8
\&    $agent\->get('http://www.livejournal.com/login.bml');
\&    $agent\->form_number('3');
\&    $agent\->field('user',$form\->{user});
\&    $agent\->field('password',$form\->{password});
\&    $agent\->submit();
\&    $agent\->get('http://www.livejournal.com/customview.cgi?user='.$form\->{user}.'&styleid=225596&checkcookies=1');
\&    print "Content\-type: text/plain\en\en";
\&    print $agent\->content();
.Ve
.Sh "Hacking Movable Type, by Dan Rinzel"
.IX Subsection "Hacking Movable Type, by Dan Rinzel"
.Vb 1
\&    use WWW::Mechanize;
.Ve
.PP
.Vb 1
\&    # a tool to automatically post entries to a moveable type weblog, and set arbitary creation dates
.Ve
.PP
.Vb 6
\&    my $mech = WWW::Mechanize\->new();
\&    my %entry;
\&    $entry\->{title} = "Test AutoEntry Title";
\&    $entry\->{btext} = "Test AutoEntry Body";
\&    $entry\->{date} = '2002\-04\-15 14:18:00';
\&    my $start = qq|http://my.blog.site/mt.cgi|;
.Ve
.PP
.Vb 11
\&    $mech\->get($start);
\&    $mech\->field('username','und3f1n3d');
\&    $mech\->field('password','obscur3d');
\&    $mech\->submit(); # to get login cookie
\&    $mech\->get(qq|$start?__mode=view&_type=entry&blog_id=1|);
\&    $mech\->form_name('entry_form');
\&    $mech\->field('title',$entry\->{title});
\&    $mech\->field('category_id',1); # adjust as needed
\&    $mech\->field('text',$entry\->{btext});
\&    $mech\->field('status',2); # publish, or 1 = draft
\&    $results = $mech\->submit();
.Ve
.PP
.Vb 5
\&    # if we're ok with this entry being datestamped "NOW" (no {date} in %entry)
\&    # we're done. Otherwise, time to be tricksy
\&    # MT returns a 302 redirect from this form. the redirect itself contains a <body onload=""> handler
\&    # which takes the user to an editable version of the form where the create date can be edited       
\&    # MT date format of YYYY\-MM\-DD HH:MI:SS is the only one that won't error out
.Ve
.PP
.Vb 11
\&    if ($entry\->{date} && $entry\->{date} =~ /^\ed{4}\-\ed{2}\-\ed{2}\es+\ed{2}:\ed{2}:\ed{2}/) {
\&        # travel the redirect
\&        $results = $mech\->get($results\->{_headers}\->{location});
\&        $results\->{_content} =~ /<body onLoad="([^\e"]+)"/is;
\&        my $js = $1;
\&        $js =~ /\e'([^']+)\e'/;
\&        $results = $mech\->get($start.$1);
\&        $mech\->form_name('entry_form');
\&        $mech\->field('created_on_manual',$entry\->{date});
\&        $mech\->submit();
\&    }
.Ve
.Sh "get\-despair, by Randal Schwartz"
.IX Subsection "get-despair, by Randal Schwartz"
Randal submitted this bot that walks the despair.com site sucking down
all the pictures.
.PP
.Vb 2
\&    use strict; 
\&    $|++;
.Ve
.PP
.Vb 2
\&    use WWW::Mechanize;
\&    use File::Basename;
.Ve
.PP
.Vb 1
\&    my $m = WWW::Mechanize\->new;
.Ve
.PP
.Vb 1
\&    $m\->get("http://www.despair.com/indem.html");
.Ve
.PP
.Vb 1
\&    my @top_links = @{$m\->links};
.Ve
.PP
.Vb 2
\&    for my $top_link_num (0..$#top_links) {
\&        next unless $top_links[$top_link_num][0] =~ /^http:/;
.Ve
.PP
.Vb 1
\&        $m\->follow_link( n=>$top_link_num ) or die "can't follow $top_link_num";
.Ve
.PP
.Vb 5
\&        print $m\->uri, "\en";
\&        for my $image (grep m{^http://store4}, map $_\->[0], @{$m\->links}) { 
\&            my $local = basename $image;
\&            print " $image...", $m\->mirror($image, $local)\->message, "\en"
\&        }
.Ve
.PP
.Vb 2
\&        $m\->back or die "can't go back";
\&    }
.Ve
